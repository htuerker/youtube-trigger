{
  "nodes": [
    {
      "inputs": {
        "properties": {
          "cacheMaxAge": {
            "buildship": { "index": 2 },
            "description": "Set cache duration in seconds",
            "title": "Cache Time",
            "type": "number",
            "default": 0
          },
          "status": {
            "default": "200",
            "type": "string",
            "description": "The HTTP status code to return",
            "enum": ["200", "201", "202", "204", "400", "401", "403", "404", "429", "500"],
            "title": "Status code",
            "buildship": {
              "options": [
                { "value": "200", "label": "OK (200)" },
                { "value": "201", "label": "Created (201)" },
                { "value": "202", "label": "Accepted (202)" },
                { "value": "301", "label": "Redirect (301)" },
                { "value": "204", "label": "No Content (204)" },
                { "label": "Bad Request (400)", "value": "400" },
                { "label": "Unauthorized (401)", "value": "401" },
                { "value": "403", "label": "Forbidden (403)" },
                { "label": "Not Found (404)", "value": "404" },
                { "value": "429", "label": "Too Many Requests (429)" },
                { "value": "500", "label": "Internal Server Error (500)" }
              ],
              "index": 0
            }
          },
          "value": {
            "type": "string",
            "default": "",
            "description": "The value to return",
            "title": "Value",
            "buildship": { "index": 1 }
          }
        },
        "required": [],
        "type": "object"
      },
      "type": "return",
      "description": "The Return Node is used to return values from the workflow. It is generally the last node in the workflow. The return node is optional as the API can inherently return a 200 OK response by default. [Full Documentation](https://docs.buildship.com/core-nodes/return).",
      "label": "Return",
      "id": "6d5a6748-934c-4921-ab15-242529757582",
      "response": { "2XX": { "properties": {}, "type": "object" } }
    }
  ],
  "trigger": {
    "name": "Youtube Trigger",
    "id": "x-youtube-trigger",
    "live": true,
    "script": "// Imports the Scheduler library\nimport { CloudSchedulerClient } from \"@google-cloud/scheduler\";\nimport { OAuth2Client } from \"google-auth-library\";\n\n/*\n** Youtube Trigger imports\n*/\nimport { Storage, Bucket } from '@google-cloud/storage';\nimport { google, youtube_v3 } from \"googleapis\";\nimport process from 'node:process';\nimport { URL } from 'node:url';\n/*\n** Youtube Trigger imports\n*/\n\nconst schedulerClient = new CloudSchedulerClient();\n\nconst getTarget = (runtimeUrl, workflowId) => ({\n  uri: `${runtimeUrl}/executeWorkflow/${workflowId}`,\n  httpMethod: \"POST\",\n  headers: {\n    \"Content-Type\": \"application/json\",\n  },\n  oidcToken: {\n    serviceAccountEmail: `runtime@${process.env.GCLOUD_PROJECT}.iam.gserviceaccount.com`,\n    audience: process.env.GCLOUD_PROJECT + \"/\" + workflowId,\n  },\n});\n\nconst locationIds = [\n  \"asia-east1\",\n  \"asia-northeast1\",\n  \"asia-southeast1\",\n  \"europe-north1\",\n  \"europe-west1\",\n  \"us-central1\",\n  \"us-east1\",\n  \"us-east4\",\n  \"us-west1\"\n];\n\nconst createTrigger = async (\n  { schedule, timeZone },\n  { workflow, runtimeUrl }\n) => {\n  /**\n *  Required. The location name. For example:\n *  `projects/PROJECT_ID/locations/LOCATION_ID`.\n */\n  let locationId = process.env.SERVICE_REGION;\n  locationId = locationIds.includes(locationId) ? locationId : \"us-central1\";\n  const parent = `projects/${process.env.GCLOUD_PROJECT}/locations/${locationId}`;\n  const name = `${parent}/jobs/rowy-workflow-${workflow.id}`;\n  /**\n    *  Required. The job to add. The user can optionally specify a name for the\n    *  job in name google.cloud.scheduler.v1.Job.name. name google.cloud.scheduler.v1.Job.name cannot be the same as an\n    *  existing job. If a name is not specified then the system will\n    *  generate a random unique name that will be returned\n    *  (name google.cloud.scheduler.v1.Job.name) in the response.\n    */\n  const httpTarget = getTarget(runtimeUrl, workflow.id);\n\n  try {\n    // Run request\n    const response = await schedulerClient.createJob({\n      parent,\n      job: {\n        name,\n        schedule,\n        timeZone,\n        httpTarget,\n      },\n    });\n\n    return response;\n  } catch (error) {\n    if (error.code === 6) {\n      // 'ALREADY_EXISTS' error\n      console.log(`Job ${name} already exists.`);\n      return updateTrigger(\n        { schedule, timeZone },\n        { workflow, runtimeUrl }\n      );\n    } else {\n      throw error;\n    }\n  }\n};\n\nconst updateTrigger = async (\n  { schedule, timeZone },\n  { workflow, runtimeUrl }\n) => {\n  let locationId = process.env.SERVICE_REGION;\n  locationId = locationIds.includes(locationId) ? locationId : \"us-central1\";\n  const parent = `projects/${process.env.GCLOUD_PROJECT}/locations/${locationId}`;\n  const name = `${parent}/jobs/rowy-workflow-${workflow.id}`;\n  const httpTarget = getTarget(runtimeUrl, workflow.id);\n\n  try {\n    // Update Job\n    const response = await schedulerClient.updateJob({\n      job: {\n        httpTarget,\n        name,\n        schedule,\n        timeZone,\n      },\n    });\n\n    return response;\n  } catch {\n    // Create Job if not exists\n    const response = await schedulerClient.createJob({\n      parent,\n      job: {\n        name,\n        schedule,\n        timeZone,\n        httpTarget,\n      },\n    });\n\n    return response;\n  }\n};\n\nconst deleteTrigger = async (_, { workflow }) => {\n  let locationId = process.env.SERVICE_REGION;\n  locationId = locationIds.includes(locationId) ? locationId : \"us-central1\";\n  const parent = `projects/${process.env.GCLOUD_PROJECT}/locations/${locationId}`;\n  const name = `${parent}/jobs/rowy-workflow-${workflow.id}`;\n  const request = {\n    name,\n  };\n  const response = await schedulerClient.deleteJob(request);\n  return response;\n};\n\nconst execute = async (params, context) => {\n  const { request, workflow, logging, isTest } = context;\n  if (isTest) {\n    /*\n    ** execute Youtube Trigger\n    */\n    const triggerOutput = await executeYoutubeTrigger(params, context);\n    /*\n    ** execute Youtube Trigger\n    */\n    return {\n      /*\n      ** Youtube Trigger result\n      */\n      output: triggerOutput,\n      /*\n      ** Youtube Trigger result\n      */\n    }\n  }\n  const client = new OAuth2Client(process.env.GCLOUD_PROJECT);\n  const token = request.headers.authorization?.split(\" \")[1];\n\n  if (!token) {\n    throw new Error(\n      \"Missing authorization header or invalid format, needs to be in format: Bearer <IdToken>\"\n    );\n  }\n\n  try {\n    const audience = process.env.GCLOUD_PROJECT + \"/\" + workflow.id;\n    const ticket = await client.verifyIdToken({\n      idToken: token,\n      audience: audience,\n    });\n\n    const payload = ticket.getPayload();\n\n    if (!payload.email_verified) {\n      throw new Error(\"Email not verified.\");\n    }\n  } catch (error) {\n    throw new Error(\"Token verification failed.\");\n  }\n\n  /*\n  ** execute Youtube Trigger\n  */\n  const triggerOutput = await executeYoutubeTrigger(params, context);\n  /*\n  ** execute Youtube Trigger\n  */\n\n  const ret = {\n    query: request.query,\n    headers: request.headers,\n    body: {},\n  };\n\n  logging.log(ret);\n\n  return {\n    request: ret,\n    /*\n    ** Youtube Trigger result\n    */\n    output: triggerOutput,\n    /*\n    ** Youtube Trigger result\n    */\n  };\n};\n\n/*\n** Youtube Trigger\n*/\n\nconst youtubeClient = google.youtube('v3');\n\ntype Snapshot = {\n  channelId: string;\n  latestVideoPublishedAt: string;\n  videos: youtube_v3.Schema$SearchResult[];\n}\n\nfunction saveLatestSnapshotToStorage(bucket: Bucket) {\n\n  return async function (workflowId: string, snapshot: Snapshot) {\n    const [workflowFolderExists] = await bucket.file(workflowId + '/').exists();\n    if (!workflowFolderExists) {\n      const file = bucket.file(`${workflowId}/`);\n      await file.save(\"\");\n    }\n    const snapshotData = JSON.stringify(snapshot, null, 2);\n    const file = bucket.file(`${workflowId}/youtube-trigger-snapshot.json`);\n    await file.save(snapshotData);\n  }\n}\n\nfunction getLatestSnapshotFromStorage(bucket: Bucket) {\n  return async function (workflowId: string): Promise<Snapshot | null> {\n    const file = bucket.file(`${workflowId}/youtube-trigger-snapshot.json`);\n    const [exists] = await file.exists();\n    if (exists) {\n      const [snapshot] = await file.download();\n      return JSON.parse(snapshot.toString(\"utf8\"));\n    }\n    return null;\n  }\n}\n\nasync function getChannelIdFromUrl(channelUrl: string) {\n  let url: URL;\n  try {\n    url = new URL(channelUrl);\n  } catch (cause) {\n    throw new Error(`Invalid URL: ${channelUrl}`);\n  }\n  if (url.hostname !== \"www.youtube.com\") {\n    throw new Error(`Invalid URL: ${channelUrl}`);\n  }\n\n  let [, handle, channelId] = url.pathname.split(\"/\");\n  if (handle !== \"channel\") {\n    if (handle?.slice(0, 1) !== \"@\") {\n      throw new Error(`Invalid URL: ${channelUrl}`);\n    }\n    const forHandle = handle.slice(1);\n    const { data: channelData } = await youtubeClient.channels.list({\n      part: [\"id\"],\n      forHandle,\n    });\n    channelId = channelData.items?.[0].id ?? \"\";\n  }\n\n  if (!channelId) {\n    throw new Error(`Could not find channel id for ${channelUrl}`);\n  }\n  return channelId;\n};\n\nfunction sortByDate(a: string, b: string) {\n  return new Date(a).getTime() - new Date(b).getTime();\n}\n\nasync function executeYoutubeTrigger(\n  { channelUrl }: { channelUrl: string },\n  { logging, workflow, auth }: any) {\n  try {\n\n    const storageClient = new Storage();\n    const bucket = storageClient.bucket(process.env.BUCKET as string);\n\n    // With auth integration\n    const { access_token } = await auth.getToken();\n    google.options({ auth: google.auth.fromAPIKey(access_token) });\n\n    const channelId = await getChannelIdFromUrl(channelUrl);\n    logging.log(\"Channel ID: \", channelId);\n\n    const latestSnapshot = await getLatestSnapshotFromStorage(bucket)(workflow.id);\n    logging.log(\"Latest Snapshot: \", latestSnapshot);\n\n    const searchQuery = {\n      part: [\"snippet\"],\n      channelId,\n      order: \"date\",\n    } as {\n      part: string[],\n      channelId: string,\n      order: string,\n      publishedAfter?: string,\n      maxResults?: number\n    };\n\n    const haveLatestSnapshot = !!latestSnapshot;\n    const isChannelIdMatches = latestSnapshot?.channelId === channelId;\n\n    if (haveLatestSnapshot && isChannelIdMatches) {\n      // If latest snapshot, fetch all videos after latest published date\n      logging.log(`Looking for videos published after ${latestSnapshot.latestVideoPublishedAt}`);\n      const timestamp = new Date(latestSnapshot.latestVideoPublishedAt).getTime();\n      searchQuery.publishedAfter = new Date(timestamp + 1000).toISOString();\n    } else {\n      if (!haveLatestSnapshot) {\n        logging.log(`No latest snapshot found, fetching recent 5 videos for initial snapshot`);\n      }\n      if (haveLatestSnapshot && !isChannelIdMatches) {\n        logging.log(`Channel ID mismatch, fetching recent 5 videos for the new channel`);\n      }\n      // If no latest snapshot, fetch recent 10 videos for initial snapshot\n      searchQuery.maxResults = 5;\n    }\n\n    const { data: searchResponse } = await youtubeClient.search.list(searchQuery);\n    const newVideos = searchResponse.items || [];\n    const newVideosSorted = newVideos.sort((a, b) =>\n      sortByDate(b.snippet?.publishedAt ?? \"\", a.snippet?.publishedAt ?? \"\"));\n\n    const latestVideo = newVideosSorted[0];\n    if (haveLatestSnapshot && isChannelIdMatches) {\n      if (newVideosSorted.length > 0) {\n        logging.log(`Found ${newVideosSorted.length} new videos since last snapshot`);\n        await saveLatestSnapshotToStorage(bucket)(workflow.id, {\n          channelId,\n          latestVideoPublishedAt: latestVideo?.snippet?.publishedAt ?? \"\",\n          videos: newVideosSorted,\n        });\n      } else {\n        logging.log(\"No new videos found since last snapshot\");\n      }\n    } else {\n      if (newVideosSorted.length > 0) {\n        logging.log(`Found ${newVideosSorted.length} new videos for initial snapshot`);\n        await saveLatestSnapshotToStorage(bucket)(workflow.id, {\n          channelId,\n          latestVideoPublishedAt: latestVideo?.snippet?.publishedAt ?? \"\",\n          videos: newVideosSorted,\n        });\n      } else {\n        logging.log(\"No videos found for initial snapshot\");\n      }\n    }\n\n    return {\n      channelId,\n      channelUrl,\n      latestVideoPublishedAt: latestVideo?.snippet?.publishedAt || latestSnapshot?.latestVideoPublishedAt || \"\",\n      newVideos: newVideosSorted.map((video) => ({\n        id: video.id?.videoId ?? \"\",\n        url: `https://www.youtube.com/watch?v=${video.id?.videoId}`,\n        title: video.snippet?.title ?? \"\",\n        description: video.snippet?.description ?? \"\",\n        publishedAt: video.snippet?.publishedAt ?? \"\",\n        thumbnail: video.snippet?.thumbnails?.high?.url ?? \"\",\n      })),\n      snapshot: latestVideo ? {\n        channelId,\n        latestVideoPublishedAt: latestVideo?.snippet?.publishedAt ?? \"\",\n        videos: newVideosSorted,\n      } : isChannelIdMatches ? latestSnapshot : null,\n    }\n  } catch (cause) {\n    logging.error(cause);\n    throw cause;\n  }\n}\n/*\n** Youtube Trigger\n*/\n\n\nexport default {\n  onCreate: createTrigger,\n  onUpdate: updateTrigger,\n  onDelete: deleteTrigger,\n  onExecution: execute,\n};",
    "inputs": {
      "required": ["locationId", "schedule", "channelUrl", "timeZone"],
      "properties": {
        "timeZone": {
          "pattern": "",
          "title": "Time Zone",
          "default": "Etc/UTC",
          "description": "",
          "buildship": {
            "sensitive": false,
            "options": [
              { "value": "Etc/UTC", "label": "UTC" },
              { "label": "America/New_York", "value": "America/New_York" },
              { "label": "America/Chicago", "value": "America/Chicago" },
              { "value": "America/Denver", "label": "America/Denver" },
              { "value": "America/Los_Angeles", "label": "America/Los_Angeles" },
              { "label": "America/Anchorage", "value": "America/Anchorage" },
              { "value": "America/Adak", "label": "America/Adak" },
              { "value": "Pacific/Honolulu", "label": "Pacific/Honolulu" },
              { "value": "Europe/London", "label": "Europe/London" },
              { "label": "Europe/Berlin", "value": "Europe/Berlin" },
              { "value": "Europe/Moscow", "label": "Europe/Moscow" },
              { "value": "Asia/Kolkata", "label": "Asia/Kolkata" },
              { "label": "Asia/Shanghai", "value": "Asia/Shanghai" },
              { "value": "Asia/Tokyo", "label": "Asia/Tokyo" },
              { "label": "Australia/Sydney", "value": "Australia/Sydney" },
              { "label": "Australia/Adelaide", "value": "Australia/Adelaide" },
              { "value": "Australia/Perth", "label": "Australia/Perth" },
              { "label": "Pacific/Auckland", "value": "Pacific/Auckland" }
            ],
            "index": 2
          },
          "type": "string",
          "enum": [
            "Etc/UTC",
            "America/New_York",
            "America/Chicago",
            "America/Denver",
            "America/Los_Angeles",
            "America/Anchorage",
            "America/Adak",
            "Pacific/Honolulu",
            "Europe/London",
            "Europe/Berlin",
            "Europe/Moscow",
            "Asia/Kolkata",
            "Asia/Shanghai",
            "Asia/Tokyo",
            "Australia/Sydney",
            "Australia/Adelaide",
            "Australia/Perth",
            "Pacific/Auckland"
          ]
        },
        "channelUrl": {
          "title": "Channel URL",
          "pattern": "",
          "type": "string",
          "description": "",
          "default": "",
          "buildship": { "index": 0, "sensitive": false }
        },
        "schedule": {
          "enum": [
            "*/5 * * * *",
            "*/15 * * * *",
            "*/30 * * * *",
            "0 * * * *",
            "0 */6 * * *",
            "0 */12 * * *",
            "0 0 * * *",
            "0 0 */5 * *",
            "0 0 */15 * *",
            "0 0 1 * *"
          ],
          "description": "",
          "pattern": "",
          "title": "Track Frequency",
          "default": "",
          "buildship": {
            "options": [
              { "value": "*/5 * * * *", "label": "Every 5 minutes" },
              { "value": "*/15 * * * *", "label": "Every 15 minutes" },
              { "label": "Every 30 minutes", "value": "*/30 * * * *" },
              { "value": "0 * * * *", "label": "Every 60 minutes" },
              { "label": "Every 6 hours", "value": "0 */6 * * *" },
              { "label": "Every 12 hours", "value": "0 */12 * * *" },
              { "label": "Every 24 hours", "value": "0 0 * * *" },
              { "label": "Every 5 days", "value": "0 0 */5 * *" },
              { "value": "0 0 */15 * *", "label": "Every 15 days" },
              { "value": "0 0 1 * *", "label": "Every 30 days" }
            ],
            "sensitive": false,
            "index": 1
          },
          "type": "string"
        }
      },
      "type": "object"
    },
    "paramsValues": {},
    "integrations": ["youtube", ""],
    "meta": {
      "description": "",
      "icon": { "type": "URL", "url": "https://storage.googleapis.com/buildship-app-us-central1/icons/youtube.svg" },
      "name": "Youtube Trigger",
      "id": "x-youtube-trigger"
    },
    "label": "Youtube Trigger",
    "type": "schedule",
    "groupId": null,
    "output": {
      "type": "object",
      "title": "output",
      "properties": {
        "channelId": { "type": "string", "description": "", "title": "Channel Id", "buildship": { "index": 0 } },
        "snapshot": {
          "type": "object",
          "properties": {},
          "title": "Snapshot",
          "description": "",
          "buildship": { "index": 4 }
        },
        "newVideos": {
          "title": "New Videos",
          "properties": {
            "video": {
              "properties": {
                "id": { "description": "", "type": "string", "title": "Video ID", "buildship": { "index": 0 } },
                "title": { "type": "string", "title": "Video Title", "buildship": { "index": 2 }, "description": "" },
                "url": { "buildship": { "index": 1 }, "title": "Video URL", "description": "", "type": "string" },
                "thumbnail": {
                  "buildship": { "index": 4 },
                  "type": "string",
                  "description": "",
                  "title": "Video Thumbnail"
                },
                "description": {
                  "buildship": { "index": 3 },
                  "type": "string",
                  "title": "Video Description",
                  "description": ""
                },
                "publishedAt": {
                  "buildship": { "index": 5 },
                  "title": "Video Publish Datetime",
                  "description": "",
                  "type": "string"
                }
              },
              "buildship": { "index": 0 },
              "description": "",
              "type": "object",
              "title": "Video"
            }
          },
          "type": "array",
          "buildship": { "index": 3 },
          "description": ""
        },
        "channelUrl": { "type": "string", "title": "Channel URL", "buildship": { "index": 1 }, "description": "" }
      },
      "description": "",
      "buildship": { "index": 0 }
    },
    "params": {
      "timeZone": {
        "description": "Time Zone",
        "type": "select",
        "defaultValue": "Etc/UTC",
        "label": "Time Zone",
        "required": true,
        "options": [
          { "label": "UTC", "value": "Etc/UTC" },
          { "label": "America/New_York", "value": "America/New_York" },
          { "label": "America/Chicago", "value": "America/Chicago" },
          { "value": "America/Denver", "label": "America/Denver" },
          { "value": "America/Los_Angeles", "label": "America/Los_Angeles" },
          { "value": "America/Anchorage", "label": "America/Anchorage" },
          { "label": "America/Adak", "value": "America/Adak" },
          { "label": "Pacific/Honolulu", "value": "Pacific/Honolulu" },
          { "value": "Europe/London", "label": "Europe/London" },
          { "label": "Europe/Berlin", "value": "Europe/Berlin" },
          { "value": "Europe/Moscow", "label": "Europe/Moscow" },
          { "value": "Asia/Kolkata", "label": "Asia/Kolkata" },
          { "value": "Asia/Shanghai", "label": "Asia/Shanghai" },
          { "value": "Asia/Tokyo", "label": "Asia/Tokyo" },
          { "value": "Australia/Sydney", "label": "Australia/Sydney" },
          { "label": "Australia/Adelaide", "value": "Australia/Adelaide" },
          { "label": "Australia/Perth", "value": "Australia/Perth" },
          { "label": "Pacific/Auckland", "value": "Pacific/Auckland" }
        ]
      },
      "locationId": {
        "required": true,
        "defaultValue": "us-central1",
        "basePrompt": "string value of gcp location",
        "type": "string",
        "label": "Location",
        "defualtValue": "us-central1"
      },
      "schedule": {
        "required": true,
        "userPromptHint": "every 5 minutes, every tuesday & thursday 5pm ",
        "defaultValue": "*/20 * * * *",
        "basePrompt": "Cron formatted string with valid input Minute:0-59, Hour:\t0-23, Day of the month:1-31,Month: 1-12 (or JAN to DEC), Day of the week:0-6 (or SUN to SAT)",
        "label": "Schedule",
        "type": "string"
      }
    },
    "dependencies": {
      "@google-cloud/scheduler": "4.2.0",
      "googleapis": "135.0.0",
      "@google-cloud/storage": "7.10.2",
      "google-auth-library": "9.9.0"
    },
    "request": { "description": "", "type": "object", "properties": {}, "title": "body", "buildship": { "index": 0 } },
    "description": "",
    "testingSchema": [{ "type": "justLabel", "name": "apiRequestData", "label": "Run your Youtube Trigger now" }]
  },
  "nodeValues": {
    "x-youtube-trigger": { "channelUrl": "", "schedule": "*/30 * * * *", "timeZone": "Etc/UTC" },
    "6d5a6748-934c-4921-ab15-242529757582": {
      "status": "200",
      "cacheMaxAge": 0,
      "value": { "keys": ["x-youtube-trigger"] }
    }
  },
  "notes": ""
}
